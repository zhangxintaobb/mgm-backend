#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();

(async()=>{
  const path = require('path');
  const fs = require('fs');
  const app = require('../app');
  var http = require('http');
  const DEFAULT_HTTP_PORT = 9001;
  const DEFAULT_HEADERS_TIMEOUT = 310 * 1000; // 310s
  const DEFAULT_KEEP_ALIVE_TIMEOUT = 305 * 1000; // 305s

  /**
   * Get port from environment and store in Express
   */

  const httpPort = +process.env.HTTP_PORT || DEFAULT_HTTP_PORT;

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }


    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    
  }

  /**
   * Create HTTP server.
   */

  const httpServer = http.createServer(app);
  httpServer.listen(httpPort);

  httpServer.headersTimeout = +process.env.HEADERS_TIMEOUT || DEFAULT_HEADERS_TIMEOUT;

  httpServer.keepAliveTimeout = +process.env.KEEP_ALIVE_TIMEOUT || DEFAULT_KEEP_ALIVE_TIMEOUT;

  httpServer.on('error', onError);
  httpServer.on('listening', () => onListening(httpPort, "http"));

  const closeHttpServer = async () => {
    return new Promise((resolve) => {
      httpServer.close(() => {
        resolve();
      })
    })
  }

  const shutdown = async (value, exitFn) => {
    try{
      await Promise.all([closeHttpServer])
    } finally {
      if (exitFn) {
        exitFn()
      } else {
        process.exit(0);
      }
    }
  }

  //Create a listener for each of the signals that we want to handle
  process.on('SIGHUP', () => {
    shutdown('SIGHUP')
  })

  process.on('SIGHINT', () => {
    shutdown('SIGHINT')
  })

  process.on('SIGTERM', () => {
    shutdown('SIGTERM')
  })

})()
